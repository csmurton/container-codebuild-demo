version: 0.2
phases:
  install:
    # Demonstrating that particular common libraries and versions
    # can be made available to the execution environment easily.
    # Not necessary in the context of this build.
    runtime-versions:
      php: 7.4
      python: 3.x
    commands:
      - echo "Login to AWS ECR docker registry"
      - aws ecr get-login-password | docker login --username AWS --password-stdin ${ECR_REPO_FQDN}
  pre_build:
    commands:
      - echo "Dump available environment variables"
      - env
  build:
    on-failure: ABORT
    commands:
      - echo "Build the Docker image"
      - docker build -t demoapp/web:latest web/
  post_build:
    commands:
      - echo "Test the Docker image runs and serves our page"
      - CONTAINER_ID=$(docker run --rm -d -p 8180:80 demoapp/web:latest)
      # If the below exits with a non-zero, the pipeline will fail
      - curl -s http://localhost:8180/ | grep 'Welcome to the demo' >/dev/null
      - docker kill ${CONTAINER_ID}
      # If we got here, the container runs locally
      # Identify the target GitHub branch to decide if we need to release
      # If this is a merge to master, release
      - GITHUB_BRANCH=${CODEBUILD_WEBHOOK_HEAD_REF#refs/heads/*}
      - |-
       #!/bin/bash
       if [ "${GITHUB_BRANCH}" == "master" ]; then
          docker tag demoapp/web:latest ${ECR_REPO_URL}:latest
          docker push ${ECR_REPO_URL}:latest
          # We could wait for image scanning to complete, and then evaluate the results
          # before proceeding.
          #aws ecr wait image-scan-complete --repository-name ${ECR_REPO_NAME} --image-id imageTag=latest
          # Force a deployment of our ECS service
          aws ecs update-service --cluster ${ECS_CLUSTER_NAME} --service ${ECS_SERVICE_NAME} --force-new-deployment
          # Wait until our ECS service is stable
          aws ecs wait services-stable --cluster ${ECS_CLUSTER_NAME} --service ${ECS_SERVICE_NAME}
       fi
